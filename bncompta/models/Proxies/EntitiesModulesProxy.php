<?php

namespace Proxies;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class EntitiesModulesProxy extends \Entities\Modules implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    private function _load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    
    public function setModuleName($moduleName)
    {
        $this->_load();
        return parent::setModuleName($moduleName);
    }

    public function getModuleName()
    {
        $this->_load();
        return parent::getModuleName();
    }

    public function setModuleTitle($moduleTitle)
    {
        $this->_load();
        return parent::setModuleTitle($moduleTitle);
    }

    public function getModuleTitle()
    {
        $this->_load();
        return parent::getModuleTitle();
    }

    public function setModuleDescription($moduleDescription)
    {
        $this->_load();
        return parent::setModuleDescription($moduleDescription);
    }

    public function getModuleDescription()
    {
        $this->_load();
        return parent::getModuleDescription();
    }

    public function setModuleVersion($moduleVersion)
    {
        $this->_load();
        return parent::setModuleVersion($moduleVersion);
    }

    public function getModuleVersion()
    {
        $this->_load();
        return parent::getModuleVersion();
    }

    public function setModuleIsCore($moduleIsCore)
    {
        $this->_load();
        return parent::setModuleIsCore($moduleIsCore);
    }

    public function getModuleIsCore()
    {
        $this->_load();
        return parent::getModuleIsCore();
    }

    public function setModuleIsEnabled($moduleIsEnabled)
    {
        $this->_load();
        return parent::setModuleIsEnabled($moduleIsEnabled);
    }

    public function getModuleIsEnabled()
    {
        $this->_load();
        return parent::getModuleIsEnabled();
    }

    public function setModuleIconPath($moduleIconPath)
    {
        $this->_load();
        return parent::setModuleIconPath($moduleIconPath);
    }

    public function getModuleIconPath()
    {
        $this->_load();
        return parent::getModuleIconPath();
    }

    public function setModulePosition($modulePosition)
    {
        $this->_load();
        return parent::setModulePosition($modulePosition);
    }

    public function getModulePosition()
    {
        $this->_load();
        return parent::getModulePosition();
    }

    public function getId()
    {
        $this->_load();
        return parent::getId();
    }

    public function addResource(\Entities\AclResources $resource)
    {
        $this->_load();
        return parent::addResource($resource);
    }

    public function getResource()
    {
        $this->_load();
        return parent::getResource();
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'moduleName', 'moduleTitle', 'moduleDescription', 'moduleVersion', 'moduleIsCore', 'moduleIsEnabled', 'moduleIconPath', 'modulePosition', 'id', 'resource');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields AS $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}