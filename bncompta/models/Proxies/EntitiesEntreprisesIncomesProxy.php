<?php

namespace Proxies;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class EntitiesEntreprisesIncomesProxy extends \Entities\EntreprisesIncomes implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    private function _load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    
    public function setDate($date)
    {
        $this->_load();
        return parent::setDate($date);
    }

    public function getDate()
    {
        $this->_load();
        return parent::getDate();
    }

    public function setHt($ht)
    {
        $this->_load();
        return parent::setHt($ht);
    }

    public function getHt()
    {
        $this->_load();
        return parent::getHt();
    }

    public function setStartDate($startDate)
    {
        $this->_load();
        return parent::setStartDate($startDate);
    }

    public function getStartDate()
    {
        $this->_load();
        return parent::getStartDate();
    }

    public function setTva($tva)
    {
        $this->_load();
        return parent::setTva($tva);
    }

    public function getTva()
    {
        $this->_load();
        return parent::getTva();
    }

    public function setFilePath($filePath)
    {
        $this->_load();
        return parent::setFilePath($filePath);
    }

    public function getFilePath()
    {
        $this->_load();
        return parent::getFilePath();
    }

    public function setDescription($description)
    {
        $this->_load();
        return parent::setDescription($description);
    }

    public function getDescription()
    {
        $this->_load();
        return parent::getDescription();
    }

    public function getId()
    {
        $this->_load();
        return parent::getId();
    }

    public function setEnterprise(\Entities\Enterprises $enterprise)
    {
        $this->_load();
        return parent::setEnterprise($enterprise);
    }

    public function getEnterprise()
    {
        $this->_load();
        return parent::getEnterprise();
    }

    public function setEnterprisesBankStatements(\Entities\EnterprisesBankStatements $enterprisesBankStatements)
    {
        $this->_load();
        return parent::setEnterprisesBankStatements($enterprisesBankStatements);
    }

    public function getEnterprisesBankStatements()
    {
        $this->_load();
        return parent::getEnterprisesBankStatements();
    }

    public function setEnterprisesClient(\Entities\EnterprisesClients $enterprisesClient)
    {
        $this->_load();
        return parent::setEnterprisesClient($enterprisesClient);
    }

    public function getEnterprisesClient()
    {
        $this->_load();
        return parent::getEnterprisesClient();
    }

    public function setEnterprisesAccountingYear(\Entities\EnterprisesAccountingYear $enterprisesAccountingYear)
    {
        $this->_load();
        return parent::setEnterprisesAccountingYear($enterprisesAccountingYear);
    }

    public function getEnterprisesAccountingYear()
    {
        $this->_load();
        return parent::getEnterprisesAccountingYear();
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'date', 'ht', 'startDate', 'tva', 'filePath', 'description', 'id', 'enterprise', 'enterprises_bank_statements', 'enterprises_client', 'enterprises_accounting_year');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields AS $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}