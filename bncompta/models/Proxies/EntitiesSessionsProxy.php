<?php

namespace Proxies;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class EntitiesSessionsProxy extends \Entities\Sessions implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    private function _load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    
    public function setSessionIpAddress($sessionIpAddress)
    {
        $this->_load();
        return parent::setSessionIpAddress($sessionIpAddress);
    }

    public function getSessionIpAddress()
    {
        $this->_load();
        return parent::getSessionIpAddress();
    }

    public function setSessionUserAgent($sessionUserAgent)
    {
        $this->_load();
        return parent::setSessionUserAgent($sessionUserAgent);
    }

    public function getSessionUserAgent()
    {
        $this->_load();
        return parent::getSessionUserAgent();
    }

    public function setSessionLastActivity($sessionLastActivity)
    {
        $this->_load();
        return parent::setSessionLastActivity($sessionLastActivity);
    }

    public function getSessionLastActivity()
    {
        $this->_load();
        return parent::getSessionLastActivity();
    }

    public function setSessionUserData($sessionUserData)
    {
        $this->_load();
        return parent::setSessionUserData($sessionUserData);
    }

    public function getSessionUserData()
    {
        $this->_load();
        return parent::getSessionUserData();
    }

    public function getSessionSessionId()
    {
        $this->_load();
        return parent::getSessionSessionId();
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'sessionIpAddress', 'sessionUserAgent', 'sessionLastActivity', 'sessionUserData', 'sessionSessionId');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields AS $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}